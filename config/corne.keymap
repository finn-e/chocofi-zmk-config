/*

    Copyright (c) 2020 The ZMK Contributors

    SPDX-License-Identifier: MIT
    TODO: soft_off wake behavior
    */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// NOT BOUGIE KEYS
// LEFT SIDE
#define LB0 0
#define LB1 1
#define LB2 2
#define LB3 3
#define LCX 4
#define LCC 14
#define LCV 24
// RIGHT SIDE
#define RB0 9
#define RB1 8
#define RB2 7
#define RB3 6
#define RCX 5
#define RCC 15
#define RCV 25

// BOUGIE KEYS
// LEFT SIDE
#define TLP 10
#define TLR 11
#define TLM 12
#define TLI 13
#define BLP 20
#define BLR 21
#define BLM 22
#define BLI 23
#define LOT 32
#define LIT 31

// RIGHT SIDE
#define TRP 19
#define TRR 18
#define TRM 17
#define TRI 16
#define BRP 29
#define BRR 28
#define BRM 27
#define BRI 26
#define ROT 33
#define RIT 34

// LAYERS
#define DEF  0
#define QWE  1
#define QNUM 2
#define NAV  3
#define DESK 4
#define WIN  5
#define NUM  6
#define SYM  7
#define BT   8
#define MISC 9

// CONFIG
#define COMBO_TIMEOUT 70
#define COMBO_LAYERS DEF NAV NUM
#define STICKY_TIMEOUT 1000
#define HOLD_TAP_TIMEOUT 190

// BEHAVIOR REDEFINITIONS

&sk {
    release-after-ms = <STICKY_TIMEOUT>;
    quick-release;
    /delete-property/ ignore-modifiers;
};

// MAIN NODE

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    combos {
        compatible = "zmk,combos";
        #include "bougie.dtsi"
    };

    behaviors {
        sticky_numlock: sticky_numlock {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&sl NUM>, <&tog NUM>;
        };

        sticky_navlock: sticky_navlock {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&sl NAV>, <&tog NAV>;
        };

        sticky_lshift: sticky_lshift {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&sk LSHIFT>, <&kt LSHIFT>;
        };

        sticky_lctrl: sticky_lctrl {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&sk LCTRL>, <&kt LCTRL>;
        };

        sticky_lmeta: sticky_lmeta {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&sk LMETA>, <&kt LMETA>;
        };

        sticky_lalt: sticky_lalt {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&sk LEFT_ALT>, <&kt LEFT_ALT>;
        };

        sticky_ralt: sticky_ralt {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&sk RIGHT_ALT>, <&kt RIGHT_ALT>;
        };

        sk_ralt_lock: sk_ralt_lock {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sticky_ralt>, <&kt RIGHT_ALT>;

            mods = <(MOD_RALT)>;
        };

        sk_lalt_lock: sk_lalt_lock {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&sticky_lalt>, <&kt LEFT_ALT>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        sk_lmeta_lock: sk_lmeta_lock {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&sticky_lmeta>, <&kt LMETA>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        sk_lctrl_lock: sk_lctrl_lock {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&sticky_lctrl>, <&kt LCTRL>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        sk_lshift_lock: sk_lshift_lock {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&sticky_lshift>, <&kt LSHIFT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&shift>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <HOLD_TAP_TIMEOUT>;
        };

        ralt_i_cut: ralt_i_cut {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&as I>, <&kp LC(X)>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
            keep-mods = <(MOD_LCTL)>;
        };

        ralt_o_copy: ralt_o_copy {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&as O>, <&kp LC(C)>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
            keep-mods = <(MOD_LCTL)>;
        };

        ralt_n_paste: ralt_n_paste {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&as N>, <&kp LC(V)>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
            keep-mods = <(MOD_LCTL)>;
        };
        
        ltshift: ltshift {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&sk_lshift_lock>;
        
            #binding-cells = <2>;
            tapping-term-ms = <HOLD_TAP_TIMEOUT>;
        };

        tabdance: tabdance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp TAB>, <&kp TAB>, <&kp TAB>, <&sys_reset>, <&kp TAB>, <&bootloader>;
        };

        qwereset: qwereset {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&tog QWE>, <&none>, <&none>, <&sys_reset>, <&none>, <&bootloader>;
        };

    };

    macros {
        tqt: tqt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp APOS>,
                <&kp APOS>,
                <&kp APOS>;
        };

        shift: shift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LSHIFT>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHIFT>;
        };

        as: as {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        bougie {
            bindings = <
  &bt BT_SEL 0   &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3   &kp LC(X)      &kp LC(X)    &bt BT_SEL 3   &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0
  &none          &none         &none         &none          &kp LC(C)      &kp LC(C)    &none          &none         &none         &none
  &none          &none         &none         &none          &kp LC(V)      &kp LC(V)    &none          &none         &none         &none
                               &qwereset     &none          &none          &none        &none          &qwereset
            >;
        };

        qwerty {
            bindings = <
  &kp Q         &kp W  &kp E     &kp R     &kp T            &kp Y    &kp U       &kp I      &kp O    &kp P
  &kp A         &kp S  &kp D     &kp F     &kp G            &kp H    &kp J       &kp K      &kp L    &kp SEMI
  &mt Z LSHIFT  &kp X  &kp C     &kp V     &kp B            &kp N    &kp M       &kp COMMA  &kp DOT  &mt FSLH RSHIFT
                       &qwereset &kp BSPC  &kp SPACE        &kp RET  &kp DELETE  &sl QNUM
            >;
        };

        qwenum {
            bindings = <
  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &kp N6  &kp N7  &kp N8  &kp N9  &kp N0
  &kp N8  &kp N6  &kp N4  &kp N2  &trans    &trans  &kp N4  &kp N5  &kp N6  &kp N0
  &kp N9  &kp N7  &kp N5  &kp N3  &trans    &trans  &kp N1  &kp N2  &kp N3  &kp N0
                  &trans  &kp N1  &kp N0    &kp N0  &kp N1  &trans
            >;
        };
    };

        nav {
            bindings = <
  &kp HOME  &kp PG_DN          &kp PG_UP  &kp END    &trans    &trans  &kp HOME  &kp PG_UP  &kp PG_DN  &kp END
  &kp LEFT  &kp DOWN           &kp UP     &kp RIGHT  &trans    &trans  &kp LEFT  &kp UP     &kp DOWN   &kp RIGHT
  &kp HOME  &kp PAGE_DOWN      &kp PG_UP  &kp END    &trans    &trans  &kp HOME  &kp PG_UP  &kp PG_DN  &kp END
                               &none      &trans     &trans    &trans  &trans    &none
            >;
        };

        desktops {
            bindings = <
  &none             &none             &none           &none              &trans    &trans  &none             &none           &none             &none
  &kp LG(LEFT)      &kp LG(DOWN)      &kp LG(UP)      &kp LG(RIGHT)      &trans    &trans  &kp LG(LEFT)      &kp LG(UP)      &kp LG(DOWN)      &kp LG(RIGHT)
  &kp LS(LG(LEFT))  &kp LS(LG(DOWN))  &kp LS(LG(UP))  &kp LS(LG(RIGHT))  &trans    &trans  &kp LS(LG(LEFT))  &kp LS(LG(UP))  &kp LS(LG(DOWN))  &kp LS(LG(RIGHT))
                                      &none           &trans             &trans    &trans  &trans            &none
            >;
        };

        windows {
            bindings = <
  &none                &none                 &none                &none                  &trans    &trans  &none                  &none                &none                 &none
  &kp LC(LG(LEFT))     &kp LC(LG(DOWN))      &kp LC(LG(UP))       &kp LC(LG(RIGHT))      &trans    &trans  &kp LC(LG(LEFT))       &kp LC(LG(UP))       &kp LC(LG(DOWN))      &kp LC(LG(RIGHT))
  &kp LS(LC(LG(LEFT))) &kp LS(LC(LG(DOWN)))  &kp LS(LC(LG(UP)))   &kp LS(LC(LG(RIGHT)))  &trans    &trans  &kp LS(LC(LG(LEFT)))   &kp LS(LC(LG(UP)))   &kp LS(LC(LG(DOWN)))  &kp LS(LC(LG(RIGHT)))
                                             &none                &trans                 &trans    &trans  &trans                 &none
            >;
        };

        num {
            bindings = <
  &none   &none   &none   &none   &trans    &trans  &none   &none   &none   &none
  &kp N8  &kp N6  &kp N4  &kp N2  &trans    &trans  &kp N2  &kp N4  &kp N6  &kp N8
  &kp N9  &kp N7  &kp N5  &kp N3  &trans    &trans  &kp N3  &kp N5  &kp N7  &kp N9
                  &none   &kp N1  &kp N0    &kp N0  &kp N1  &none
            >;
        };

        sym {
            bindings = <
  &none       &none       &none       &none       &trans        &trans      &none       &none       &none       &none
  &kp LS(N8)  &kp LS(N6)  &kp LS(N4)  &kp LS(N2)  &trans        &trans      &kp RS(N2)  &kp RS(N4)  &kp RS(N6)  &kp RS(N8)
  &kp LS(N9)  &kp LS(N7)  &kp LS(N5)  &kp LS(N3)  &trans        &trans      &kp RS(N3)  &kp RS(N5)  &kp LS(N7)  &kp RS(N9)
                          &none       &kp LS(N1)  &kp LS(N0)    &kp RS(N0)  &kp RS(N1)  &none
            >;
        };

        bt {
            bindings = <
  &none           &none         &none         &none         &trans    &trans  &none         &none         &none         &none
  &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &trans    &trans  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0
  &bt BT_CLR_ALL  &bt BT_PRV    &bt BT_NXT    &bt BT_CLR    &trans    &trans  &bt BT_CLR    &bt BT_NXT    &bt BT_PRV    &bt BT_CLR_ALL
                                &none         &trans        &trans    &trans  &trans        &none
            >;
        };

        misc {
            bindings = <
  &none           &none          &none         &none         &trans    &trans  &none         &none         &none          &none
  &kp C_VOL_DN    &kp C_MUTE     &kp C_VOL_UP  &sys_reset    &trans    &trans  &sys_reset    &kp C_VOL_UP  &kp C_MUTE     &kp C_VOL_DN
  &kp C_BRI_DN    &kp C_BKLT_TOG &kp C_BRI_UP  &bootloader   &trans    &trans  &bootloader   &kp C_BRI_UP  &kp C_BKLT_TOG &kp C_BRI_DN
                                 &none         &trans        &trans    &trans  &trans        &none
            >;
        };
};
