/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT_L 0

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    combos {
        compatible = "zmk,combos";

        tabesc-sklalt {
            bindings = <&sk_lalt_lock>;
            key-positions = <0 10>;
        };

        io-u {
            bindings = <&kp U>;
            key-positions = <1 2>;
        };

        in-c {
            bindings = <&kp C>;
            key-positions = <1 3>;
        };

        ie-sklalt {
            bindings = <&sk_lmeta_lock>;
            key-positions = <1 11>;
        };

        ia-y {
            bindings = <&kp Y>;
            key-positions = <1 12>;
        };

        it-w {
            bindings = <&kp W>;
            key-positions = <1 13>;
        };

        on-l {
            bindings = <&kp L>;
            key-positions = <2 3>;
        };

        oe-g {
            bindings = <&kp G>;
            key-positions = <11 2>;
        };

        oa-sklctrl {
            bindings = <&sk_lctrl_lock>;
            key-positions = <2 12>;
        };

        ot-d {
            bindings = <&kp D>;
            key-positions = <2 13>;
        };

        ne-m {
            bindings = <&kp M>;
            key-positions = <3 11>;
        };

        na-f {
            bindings = <&kp F>;
            key-positions = <3 12>;
        };

        nt-skshift {
            bindings = <&sk_lshift_lock>;
            key-positions = <13 3>;
        };

        ieo-apos {
            bindings = <&kp APOS>;
            key-positions = <11 1 2>;
        };

        ien-minus {
            bindings = <&kp MINUS>;
            key-positions = <11 1 3>;
        };

        iea-comma {
            bindings = <&kp COMMA>;
            key-positions = <1 11 12>;
        };

        iet-dot {
            bindings = <&kp DOT>;
            key-positions = <11 1 13>;
        };

        oai-p {
            bindings = <&kp P>;
            key-positions = <2 12 1>;
        };

        oan-z {
            bindings = <&kp Z>;
            key-positions = <2 12 3>;
        };

        oae-b {
            bindings = <&kp B>;
            key-positions = <12 2 11>;
        };

        oat-x {
            bindings = <&kp X>;
            key-positions = <12 2 13>;
        };

        nti-q {
            bindings = <&kp Q>;
            key-positions = <13 3 1>;
        };

        nto-v {
            bindings = <&kp V>;
            key-positions = <13 3 2>;
        };

        nte-j {
            bindings = <&kp J>;
            key-positions = <11 3 13>;
        };

        nta-k {
            bindings = <&kp K>;
            key-positions = <13 3 12>;
        };

        ieoa-del {
            bindings = <&kp DELETE>;
            key-positions = <11 1 2 12>;
        };

        ient-slnav {
            bindings = <&sticky_navlock>;
            key-positions = <11 1 13 3>;
            layers = <0>;
        };

        eitn-nav-tog {
            bindings = <&tog 2>;
            key-positions = <11 1 13 3>;
            layers = <2>;
        };

        oant-slnum {
            bindings = <&sticky_numlock>;
            key-positions = <12 2 3 13>;
            layers = <0>;
        };

        oant-num-tog {
            bindings = <&tog 3>;
            key-positions = <12 2 3 13>;
            layers = <3>;
        };

        ion-ret {
            bindings = <&kp RET>;
            key-positions = <1 2 3>;
        };

        iot-paste {
            bindings = <&kp LC(V)>;
            key-positions = <1 2 13>;
        };

        ian-copy {
            bindings = <&kp LC(C)>;
            key-positions = <1 3 12>;
        };

        eon-cut {
            bindings = <&kp LC(X)>;
            key-positions = <11 2 3>;
        };

        ean-redo {
            bindings = <&kp LC(LS(Z))>;
            key-positions = <11 12 3>;
        };

        iat-undo {
            bindings = <&kp LC(Z)>;
            key-positions = <13 12 1>;
        };

        eot-pscrn {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <2 13 11>;
        };

        eat-esc {
            bindings = <&gresc>;
            key-positions = <11 12 13>;
        };

        iont-caps_word {
            bindings = <&caps_word>;
            key-positions = <1 2 3 13>;
        };

        ntea-caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <3 13 12 2 11>;
        };

        ntea-insert {
            bindings = <&kp INSERT>;
            key-positions = <11 12 13 3>;
        };

        SPtab-home {
            bindings = <&kp HOME>;
            key-positions = <32 0>;
        };

        SPesc-left {
            bindings = <&kp LEFT>;
            key-positions = <32 0>;
        };

        SPe-pgdn {
            bindings = <&kp PG_DN>;
            key-positions = <32 0>;
        };

        SPa-pgup {
            bindings = <&kp PG_UP>;
            key-positions = <32 0>;
        };

        SPt-end {
            bindings = <&kp END>;
            key-positions = <32 0>;
        };

        SPi-down {
            bindings = <&kp DOWN>;
            key-positions = <32 0>;
        };

        SPo-up {
            bindings = <&kp UP>;
            key-positions = <32 0>;
        };

        SPn-right {
            bindings = <&kp RIGHT>;
            key-positions = <32 0>;
        };

        SPx-left {
            bindings = <&kp LEFT>;
            key-positions = <32 0>;
        };

        SPc-down {
            bindings = <&kp DOWN>;
            key-positions = <32 0>;
        };

        SPv-right {
            bindings = <&kp RIGHT>;
            key-positions = <32 0>;
        };

        SPtabesc-sklalt {
            bindings = <&sk_lalt_lock>;
            key-positions = <32 0 10>;
        };

        SPio-u {
            bindings = <&kp U>;
            key-positions = <32 1 2>;
        };

        SPin-c {
            bindings = <&kp C>;
            key-positions = <32 1 3>;
        };

        SPie-sklalt {
            bindings = <&sk_lmeta_lock>;
            key-positions = <32 1 11>;
        };

        SPia-y {
            bindings = <&kp Y>;
            key-positions = <32 1 12>;
        };

        SPit-w {
            bindings = <&kp W>;
            key-positions = <32 1 13>;
        };

        SPon-l {
            bindings = <&kp L>;
            key-positions = <32 2 3>;
        };

        SPoe-g {
            bindings = <&kp G>;
            key-positions = <32 11 2>;
        };

        SPoa-sklctrl {
            bindings = <&sk_lctrl_lock>;
            key-positions = <32 2 12>;
        };

        SPot-d {
            bindings = <&kp D>;
            key-positions = <32 2 13>;
        };

        SPne-m {
            bindings = <&kp M>;
            key-positions = <32 3 11>;
        };

        SPna-f {
            bindings = <&kp F>;
            key-positions = <32 3 12>;
        };

        SPnt-skshift {
            bindings = <&sk_lshift_lock>;
            key-positions = <32 13 3>;
        };

        SPieo-apos {
            bindings = <&kp APOS>;
            key-positions = <32 11 1 2>;
        };

        SPien-minus {
            bindings = <&kp MINUS>;
            key-positions = <32 11 1 3>;
        };

        SPiea-comma {
            bindings = <&kp COMMA>;
            key-positions = <32 1 11 12>;
        };

        SPiet-dot {
            bindings = <&kp DOT>;
            key-positions = <32 11 1 13>;
        };

        SPoai-p {
            bindings = <&kp P>;
            key-positions = <32 2 12 1>;
        };

        SPoan-z {
            bindings = <&kp Z>;
            key-positions = <32 2 12 3>;
        };

        SPoae-b {
            bindings = <&kp B>;
            key-positions = <32 12 2 11>;
        };

        SPoat-x {
            bindings = <&kp X>;
            key-positions = <32 12 2 13>;
        };

        SPnti-q {
            bindings = <&kp Q>;
            key-positions = <32 13 3 1>;
        };

        SPnto-v {
            bindings = <&kp V>;
            key-positions = <32 13 3 2>;
        };

        SPnte-j {
            bindings = <&kp J>;
            key-positions = <32 11 3 13>;
        };

        SPnta-k {
            bindings = <&kp K>;
            key-positions = <32 13 3 12>;
        };

        SPieoa-del {
            bindings = <&kp DELETE>;
            key-positions = <32 11 1 2 12>;
        };

        SPient-slnav {
            bindings = <&sticky_navlock>;
            key-positions = <32 11 1 13 3>;
            layers = <32 0>;
        };

        SPeitn-nav-tog {
            bindings = <&tog 2>;
            key-positions = <32 11 1 13 3>;
            layers = <32 2>;
        };

        SPoant-bt {
            bindings = <&sl 5>;
            key-positions = <32 12 2 3 13>;
        };

        SPoant-num-tog {
            bindings = <&tog 3>;
            key-positions = <32 12 2 3 13>;
            layers = <32 3>;
        };

        SPion-ret {
            bindings = <&kp RET>;
            key-positions = <32 1 2 3>;
        };

        SPiot-paste {
            bindings = <&kp LC(V)>;
            key-positions = <32 1 2 13>;
        };

        SPian-copy {
            bindings = <&kp LC(C)>;
            key-positions = <32 1 3 12>;
        };

        SPeon-cut {
            bindings = <&kp LC(X)>;
            key-positions = <32 11 2 3>;
        };

        SPean-redo {
            bindings = <&kp LC(LS(Z))>;
            key-positions = <32 11 12 3>;
        };

        SPiat-undo {
            bindings = <&kp LC(Z)>;
            key-positions = <32 13 12 1>;
        };

        SPeot-pscrn {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <32 2 13 11>;
        };

        SPeat-esc {
            bindings = <&gresc>;
            key-positions = <32 11 12 13>;
        };

        SPiont-caps_word {
            bindings = <&caps_word>;
            key-positions = <32 1 2 3 13>;
        };

        SPntea-caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <32 3 13 12 2 11>;
        };

        SPntea-insert {
            bindings = <&kp INSERT>;
            key-positions = <32 11 12 13 3>;
        };

        BStab-tab {
            bindings = <&kp TAB>;
            key-positions = <31 0>;
        };

        BSesc-del {
            bindings = <&kp DELETE>;
            key-positions = <31 10>;
        };

        BSe-7 {
            bindings = <&kp N7>;
            key-positions = <31 1>;
        };

        BSa-8 {
            bindings = <&kp N8>;
            key-positions = <31 2>;
        };

        BSt-9 {
            bindings = <&kp N9>;
            key-positions = <31 3>;
        };

        BSi-4 {
            bindings = <&kp N4>;
            key-positions = <31 11>;
        };

        BSo-5 {
            bindings = <&kp N5>;
            key-positions = <31 12>;
        };

        BSn-6 {
            bindings = <&kp N6>;
            key-positions = <31 13>;
        };

        BSx-1 {
            bindings = <&kp N1>;
            key-positions = <31 21>;
        };

        BSc-2 {
            bindings = <&kp N2>;
            key-positions = <31 22>;
        };

        BSv-3 {
            bindings = <&kp N1>;
            key-positions = <31 23>;
        };

        BStabesc-sklalt {
            bindings = <&sk_lalt_lock>;
            key-positions = <31 0 10>;
        };

        BSio-u {
            bindings = <&kp U>;
            key-positions = <31 1 2>;
        };

        BSin-c {
            bindings = <&kp C>;
            key-positions = <31 1 3>;
        };

        BSie-sklalt {
            bindings = <&sk_lmeta_lock>;
            key-positions = <31 1 11>;
        };

        BSia-y {
            bindings = <&kp Y>;
            key-positions = <31 1 12>;
        };

        BSit-w {
            bindings = <&kp W>;
            key-positions = <31 1 13>;
        };

        BSon-l {
            bindings = <&kp L>;
            key-positions = <31 2 3>;
        };

        BSoe-g {
            bindings = <&kp G>;
            key-positions = <31 11 2>;
        };

        BSoa-sklctrl {
            bindings = <&sk_lctrl_lock>;
            key-positions = <31 2 12>;
        };

        BSot-d {
            bindings = <&kp D>;
            key-positions = <31 2 13>;
        };

        BSne-m {
            bindings = <&kp M>;
            key-positions = <31 3 11>;
        };

        BSna-f {
            bindings = <&kp F>;
            key-positions = <31 3 12>;
        };

        BSnt-skshift {
            bindings = <&sk_lshift_lock>;
            key-positions = <31 13 3>;
        };

        BSieo-apos {
            bindings = <&kp APOS>;
            key-positions = <31 11 1 2>;
        };

        BSien-minus {
            bindings = <&kp MINUS>;
            key-positions = <31 11 1 3>;
        };

        BSiea-comma {
            bindings = <&kp COMMA>;
            key-positions = <31 1 11 12>;
        };

        BSiet-dot {
            bindings = <&kp DOT>;
            key-positions = <31 11 1 13>;
        };

        BSoai-p {
            bindings = <&kp P>;
            key-positions = <31 2 12 1>;
        };

        BSoan-z {
            bindings = <&kp Z>;
            key-positions = <31 2 12 3>;
        };

        BSoae-b {
            bindings = <&kp B>;
            key-positions = <31 12 2 11>;
        };

        BSoat-x {
            bindings = <&kp X>;
            key-positions = <31 12 2 13>;
        };

        BSnti-q {
            bindings = <&kp Q>;
            key-positions = <31 13 3 1>;
        };

        BSnto-v {
            bindings = <&kp V>;
            key-positions = <31 13 3 2>;
        };

        BSnte-j {
            bindings = <&kp J>;
            key-positions = <31 11 3 13>;
        };

        BSnta-k {
            bindings = <&kp K>;
            key-positions = <31 13 3 12>;
        };

        BSieoa-del {
            bindings = <&kp DELETE>;
            key-positions = <31 11 1 2 12>;
        };

        BSient-slnav {
            bindings = <&sticky_navlock>;
            key-positions = <31 11 1 13 3>;
            layers = <31 0>;
        };

        BSeitn-nav-tog {
            bindings = <&tog 2>;
            key-positions = <31 11 1 13 3>;
            layers = <31 2>;
        };

        BSoant-slnum {
            bindings = <&sticky_numlock>;
            key-positions = <31 12 2 3 13>;
            layers = <31 0>;
        };

        BSoant-num-tog {
            bindings = <&tog 3>;
            key-positions = <31 12 2 3 13>;
            layers = <31 3>;
        };

        BSion-ret {
            bindings = <&kp RET>;
            key-positions = <31 1 2 3>;
        };

        BSiot-paste {
            bindings = <&kp LC(V)>;
            key-positions = <31 1 2 13>;
        };

        BSian-copy {
            bindings = <&kp LC(C)>;
            key-positions = <31 1 3 12>;
        };

        BSeon-cut {
            bindings = <&kp LC(X)>;
            key-positions = <31 11 2 3>;
        };

        BSean-redo {
            bindings = <&kp LC(LS(Z))>;
            key-positions = <31 11 12 3>;
        };

        BSiat-undo {
            bindings = <&kp LC(Z)>;
            key-positions = <31 13 12 1>;
        };

        BSeot-pscrn {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <31 2 13 11>;
        };

        BSeat-esc {
            bindings = <&gresc>;
            key-positions = <31 11 12 13>;
        };

        BSiont-caps_word {
            bindings = <&caps_word>;
            key-positions = <31 1 2 3 13>;
        };

        BSntea-caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <31 3 13 12 2 11>;
        };

        BSntea-insert {
            bindings = <&kp INSERT>;
            key-positions = <31 11 12 13 3>;
        };
    };

    behaviors {
        sticky_numlock: sticky_numlock {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&sl 3>, <&tog 3>;
        };

        sticky_navlock: sticky_navlock {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&sl 2>, <&tog 2>;
        };

        sticky_lshift: sticky_lshift {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&sk LSHIFT>, <&kt LSHIFT>;
        };

        sticky_lctrl: sticky_lctrl {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&sk LCTRL>, <&kt LCTRL>;
        };

        sticky_lmeta: sticky_lmeta {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&sk LMETA>, <&kt LMETA>;
        };

        sticky_lalt: sticky_lalt {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&sk LEFT_ALT>, <&kt LEFT_ALT>;
        };

        sticky_ralt: sticky_ralt {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&sk RIGHT_ALT>, <&kt RIGHT_ALT>;
        };

        sk_ralt_lock: sk_ralt_lock {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&sticky_ralt>, <&kt RIGHT_ALT>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
        };

        sk_lalt_lock: sk_lalt_lock {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&sticky_lalt>, <&kt LEFT_ALT>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        sk_lmeta_lock: sk_lmeta_lock {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&sticky_lmeta>, <&kt LMETA>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        sk_lctrl_lock: sk_lctrl_lock {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&sticky_lctrl>, <&kt LCTRL>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        sk_lshift_lock: sk_lshift_lock {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&sticky_lshift>, <&kt LSHIFT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        bougie {
            bindings = <
  &kp RET          &kp I      &kp O        &kp N      &tog 1         &tog 1       &kp N      &kp O        &kp I      &kp RET
  &sk_lshift_lock  &kp E      &kp A        &kp T      &sys_reset     &sys_reset   &kp T      &kp A        &kp E      &sk_lshift_lock
  &sl 5            &kp LC(X)  &kp LC(C)    &kp LC(V)  &bootloader    &bootloader  &kp LC(V)  &kp LC(C)    &kp LC(X)  &sl 5
                              &key_repeat  &kp BSPC   &kp SPACE      &kp SPACE    &kp BSPC   &key_repeat
            >;
        };

        qwerty {
            bindings = <
  &kp Q         &kp W  &kp E   &kp R     &kp T        &kp Y    &kp U       &kp I            &kp O    &kp P
  &kp A         &kp S  &kp D   &kp F     &kp G        &kp H    &kp J       &kp K            &kp L    &kp SEMI
  &mt Z LSHIFT  &kp X  &kp C   &kp V     &kp B        &kp N    &kp M       &kp COMMA        &kp DOT  &mt FSLH RSHIFT
                       &tog 1  &kp BSPC  &kp SPACE    &kp RET  &kp DELETE  &sticky_numlock
            >;
        };

        nav {
            bindings = <
  &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &trans    &trans  &kp HOME  &kp PG_UP  &kp PG_DN  &kp END
  &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &trans    &trans  &kp LEFT  &kp UP     &kp DOWN   &kp RIGHT
  &trans    &kp LEFT   &kp DOWN   &kp RIGHT  &trans    &trans  &kp LEFT  &kp DOWN   &kp RIGHT  &trans
                       &to 0      &trans     &trans    &trans  &trans    &to 0
            >;
        };

        num {
            bindings = <
  &kp DOT  &kp N7  &kp N8  &kp N9  &trans    &trans  &kp N7  &kp N8  &kp N9  &kp DOT
  &kp N0   &kp N4  &kp N5  &kp N6  &trans    &trans  &kp N4  &kp N5  &kp N6  &kp N0
  &trans   &kp N1  &kp N2  &kp N3  &trans    &trans  &kp N1  &kp N2  &kp N3  &trans
                   &to 0   &trans  &trans    &trans  &trans  &to 0
            >;
        };

        sym {
            bindings = <
  &kp EQUAL     &kp LS(AMPS)  &kp LS(STAR)   &kp LS(LPAR)   &trans    &trans  &kp LS(AMPS)  &kp LS(STAR)   &kp LS(LPAR)   &kp EQUAL
  &kp LS(RPAR)  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &trans    &trans  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &kp LS(RPAR)
  &trans        &kp LS(EXCL)  &kp LS(AT)     &kp LS(POUND)  &trans    &trans  &kp LS(EXCL)  &kp LS(AT)     &kp LS(POUND)  &trans
                              &to 0          &trans         &trans    &trans  &trans        &to 0
            >;
        };

        bt {
            bindings = <
  &bt BT_SEL 4  &bt BT_PRV    &bt BT_NXT    &bt BT_CLR    &trans    &trans  &trans  &trans  &trans  &trans
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &trans    &trans  &trans  &trans  &trans  &trans
  &trans        &trans        &trans        &trans        &trans    &trans  &trans  &trans  &trans  &trans
                              &to 0         &trans        &trans    &trans  &trans  &to 0
            >;
        };

        misc {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &to 0   &trans  &trans    &trans  &trans  &to 0
            >;
        };
    };
};
