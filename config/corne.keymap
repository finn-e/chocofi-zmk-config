/*

    Copyright (c) 2020 The ZMK Contributors

    SPDX-License-Identifier: MIT
    TODO: soft_off wake behavior
    */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// NOT BOUGIE KEYS
// LEFT SIDE
#define LB0 0
#define LB1 1
#define LB2 2
#define LB3 3
#define LCX 4
#define LCC 14
#define LCV 24
// RIGHT SIDE
#define RB0 9
#define RB1 8
#define RB2 7
#define RB3 6
#define RCX 5
#define RCC 15
#define RCV 25

// BOUGIE KEYS
// LEFT SIDE
#define TLP 10
#define TLR 11
#define TLM 12
#define TLI 13
#define BLP 20
#define BLR 21
#define BLM 22
#define BLI 23
#define LOT 32
#define LIT 31

// RIGHT SIDE
#define TRP 19
#define TRR 18
#define TRM 17
#define TRI 16
#define BRP 29
#define BRR 28
#define BRM 27
#define BRI 26
#define ROT 33
#define RIT 34

// LAYERS
#define DEF  0
#define QWE  1
#define QNUM 2
#define NAV  3
#define DESK 4
#define WIN  5
#define NUM  6
#define SYM  7
#define BT   8
#define MISC 9

// CONFIG
#define COMBO_TIMEOUT 70
#define COMBO_LAYERS DEF NAV NUM DESK WIN SYM BT MISC
#define STICKY_TIMEOUT 1000
#define HOLD_TAP_TIMEOUT 190

// BEHAVIOR REDEFINITIONS

&sk {
    release-after-ms = <STICKY_TIMEOUT>;
    quick-release;
    /delete-property/ ignore-modifiers;
};

&sl {
    release-after-ms = <STICKY_TIMEOUT>;
    quick-release;
    /delete-property/ ignore-modifiers;
};

&lt {
    #binding-cells = <2>;
    bindings = <&mo>, <&kp>;
    tapping-term-ms = <HOLD_TAP_TIMEOUT>;
    quick-tap-ms = <HOLD_TAP_TIMEOUT>;
    hold-while-undecided;
};
// MAIN NODE

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    combos {
        compatible = "zmk,combos";

#define LOCOMBO(NAME, BINDINGS, KEYPOS) \
combo_l_##NAME { \
	timeout-ms = <COMBO_TIMEOUT>; \
	bindings = <BINDINGS>; \
	key-positions = <KEYPOS>; \
	layers = <COMBO_LAYERS>; \
}; \

#define LTCOMBO(NAME, OUTER_BINDINGS, INNER_BINDINGS, BOTH_BINDINGS, KEYPOS) \
combo_li_##NAME { \
	timeout-ms = <COMBO_TIMEOUT>; \
	bindings = <INNER_BINDINGS>; \
	key-positions = <KEYPOS LIT>; \
	layers = <COMBO_LAYERS>; \
}; \
combo_lo_##NAME { \
	timeout-ms = <COMBO_TIMEOUT>; \
	bindings = <OUTER_BINDINGS>; \
	key-positions = <KEYPOS LOT>; \
	layers = <COMBO_LAYERS>; \
}; \
combo_lb_##NAME { \
	timeout-ms = <COMBO_TIMEOUT>; \
	bindings = <BOTH_BINDINGS>; \
	key-positions = <KEYPOS LIT LOT>; \
	layers = <COMBO_LAYERS>; \
};

#define ROCOMBO(NAME, BINDINGS, KEYPOS) \
combo_r_##NAME { \
	timeout-ms = <COMBO_TIMEOUT>; \
	bindings = <BINDINGS>; \
	key-positions = <KEYPOS>; \
	layers = <COMBO_LAYERS>; \
}; \

#define RTCOMBO(NAME, OUTER_BINDINGS, INNER_BINDINGS, BOTH_BINDINGS, KEYPOS) \
combo_ri_##NAME { \
	timeout-ms = <COMBO_TIMEOUT>; \
	bindings = <INNER_BINDINGS>; \
	key-positions = <KEYPOS RIT>; \
	layers = <COMBO_LAYERS>; \
}; \
combo_ro_##NAME { \
	timeout-ms = <COMBO_TIMEOUT>; \
	bindings = <OUTER_BINDINGS>; \
	key-positions = <KEYPOS ROT>; \
	layers = <COMBO_LAYERS>; \
}; \
combo_rb_##NAME { \
	timeout-ms = <COMBO_TIMEOUT>; \
	bindings = <BOTH_BINDINGS>; \
	key-positions = <KEYPOS RIT ROT>; \
	layers = <COMBO_LAYERS>; \
};

#define TCOMBO(NAME, OUTER_BINDINGS, INNER_BINDINGS, BOTH_BINDINGS, LEFT_KEYPOS, RIGHT_KEYPOS) \
LTCOMBO(##NAME, ##OUTER_BINDINGS, ##INNER_BINDINGS, ##BOTH_BINDINGS, ##LEFT_KEYPOS) \
RTCOMBO(##NAME, ##OUTER_BINDINGS, ##INNER_BINDINGS, ##BOTH_BINDINGS, ##RIGHT_KEYPOS)

#define FCOMBO(NAME, BINDINGS, OUTER_BINDINGS, INNER_BINDINGS, BOTH_BINDINGS, LEFT_KEYPOS, RIGHT_KEYPOS) \
LOCOMBO(##NAME, ##BINDINGS, ##LEFT_KEYPOS) \
ROCOMBO(##NAME, ##BINDINGS, ##RIGHT_KEYPOS) \
TCOMBO(##NAME, ##OUTER_BINDINGS, ##INNER_BINDINGS, ##BOTH_BINDINGS, ##LEFT_KEYPOS, ##RIGHT_KEYPOS)

//** COMBOS **//
LTCOMBO(TP, &kp LEFT, &as N8, &as F8, TLP)
RTCOMBO(TP, &kp RIGHT, &as N8, &as F8, TRP)
TCOMBO(E, &kp DOWN, &as N6, &as F6, TLR, TRR)
TCOMBO(A, &kp UP, &as N4, &as F4, TLM, TRM)
LTCOMBO(T, &kp RIGHT, &as N2, &as F2, TLI)
RTCOMBO(T, &kp LEFT, &as N2, &as F2, TRI)
LTCOMBO(TAB, &kp END, &as N9, &as F9, BLP)
RTCOMBO(TAB, &kp HOME, &as N9, &as F9, BRP)
TCOMBO(I, &kp PG_DN, &as N7, &as F7, BLR, BRR)
TCOMBO(O, &kp PG_UP, &as N5, &as F5, BLM, BRM)
LTCOMBO(N, &kp HOME, &as N3, &as F3, BLI)
RTCOMBO(N, &kp END, &as N3, &as F3, BRI)
FCOMBO(RALT,       &sk_ralt_lock,      &kp GT,                &kp LT,                &bt BT_SEL 0,           TLP BLP,                           TRP BRP)
FCOMBO(LALT,       &sk_lalt_lock,      &kp RBRC,              &kp LBRC,              &bt BT_SEL 1,           TLR BLR,                           TRR BRR)
FCOMBO(LCTRL,      &sk_lctrl_lock,     &kp RBKT,              &kp LBKT,              &bt BT_SEL 2,           TLM BLM,                           TRM BRM)
FCOMBO(LMETA,      &sk_lmeta_lock,     &kp RPAR,              &kp LPAR,              &bt BT_SEL 3,           TLI BLI,                           TRI BRI)
FCOMBO(MOUSEL,     &mkp LCLK,          &none, 				  &none,                 &none,                  TLP TLI,                           TRP TRI)
FCOMBO(MOUSEM,     &mkp MCLK,          &none, 				  &none,                 &none,                  TLP TLM,                           TRP BRM)
FCOMBO(MOUSER,     &mkp RCLK,          &none, 				  &none,                 &none,                  TLP TLR,                           TRP TRM)
FCOMBO(H,          &as H,              &kp AMPS,              &kp PIPE,              &as F11,                TLR TLM,                           TRR TRM)
FCOMBO(S,          &as S,              &kp EQUAL,             &kp PLUS,              &as F9,                 TLR TLI,                           TRR TRI)
FCOMBO(R,          &as R,              &kp ASTERISK,          &as N0,                &as F10,                TLM TLI,                           TRM TRI)
FCOMBO(U,          &as U,              &kp AT,                &kp AT,                &as F15,                BLR BLM,                           BRR BRM)
FCOMBO(C,          &as C,              &caps_word,            &kp CAPS,              &as F14,                BLR BLI,                           BRR BRI)
FCOMBO(L,          &as L,              &kp CARET,             &kp N1,                &as F12,                BLM BLI,                           BRM BRI)
FCOMBO(Y,          &as Y,              &kp HASH,              &kp LS(RA(SEMI)),      &as F21,                TLR BLM,                           TRR BRM)
FCOMBO(G,          &as G,              &kp DOLLAR,            &kp RA(N5),            &as F18,                BLR TLM,                           BRR TRM)
FCOMBO(W,          &as W,              &kp PERCENT,           &kp RA(SEMI),          &as F20,                TLR BLI,                           TRR BRI)
FCOMBO(M,          &as M,              &kp SLASH,             &kp BSLH,              &as F16,                BLR TLI,                           BRR TRI)
FCOMBO(D,          &as D,              &kp PRINTSCREEN,       &kp LS(PRINTSCREEN),   &as F13,                TLM BLI,                           TRM BRI)
FCOMBO(F,          &as F,              &sk_lshift_lock,       &sk_lshift_lock,       &as F17,                BLM TLI,                           BRM TRI)
FCOMBO(APOS,       &kp APOS,           &kp DQT,               &kp GRAVE,             &tqt,                   TLR BLR TLM,                       TRR BRR TRM)
FCOMBO(COMMA,      &kp COMMA,          &kp QMARK,             &kp SEMI,              &kp RA(SLASH),          TLR BLR TLI,                       TRR BRM TRI)
FCOMBO(DASH,       &kp MINUS,          &kp UNDER,             &kp TILDE,             &kp LS(RA(SLASH)),      TLR BLR BLM,                       TRR BRR BRM)
FCOMBO(DOT,        &kp DOT,            &kp EXCL,              &kp COLON,             &kp RA(N8),             TLR BLR BLI,                       TRR BRM BRI)
FCOMBO(P,          &as P,              &kp PRINTSCREEN,       &kp LS(PRINTSCREEN),   &as F19,                TLM BLM TLR,                       TRM BRM TRR)
FCOMBO(B,          &as B,              &kp LG(W),             &kp LG(G),             &as F22,                TLM BLM BLR,                       TRM BRM BRR)
FCOMBO(Z,          &as Z,              &kp C_BRI_UP,          &kp C_BRI_DN,          &kp C_BKLT_TOG,         TLM BLM TLI,                       TRM BRM BRI)
FCOMBO(X,          &as X,              &kp C_VOL_UP,          &kp C_VOL_DN,          &kp C_MUTE,             TLM BLM BLI,                       TRM BRM TRI)
FCOMBO(Q,          &as Q,              &none,                 &none,                 &none,                  TLI BLI TLR,                       TRI BRI TRR)
FCOMBO(J,          &as J,              &kp C_NEXT,            &kp C_PREV,            &kp C_PP,               TLI BLI BLR,                       TRI BRI BRR)
FCOMBO(K,          &as K,              &kp LA(SPACE),         &kp LGUI,              &as F23,                TLI BLI TLM,                       TRI BRI TRM)
FCOMBO(V,          &as V,              &kp LC(LA(T)),         &none,                 &as F24,                TLI BLI BLM,                       TRI BRI BRM)
FCOMBO(BT,         &sl BT,             &bt BT_CLR,            &bt BT_CLR,            &bt BT_CLR_ALL,         TLR BLR TLM BLM,                   TRR BRR TRM BRM)
FCOMBO(NAVLOCK,    &sticky_navlock,           &none,                 &none,                 &none,                  TLR BLR TLI BLI,                   TRR BRR TRI BRI)
FCOMBO(NUMLOCK,    &sticky_numlock,           &sk_lshift_lock,       &none,                 &none,                  TLM BLM TLI BLI,                   TRM BRM TRI BRI)
FCOMBO(RET,        &kp RET,            &kp LS(RET),           &kp LS(RET),           &kp LS(RET),            TLR TLM TLI,                       TRR TRM TRI)
FCOMBO(PASTE,      &kp LC(V),          &kp LS(LC(V)),         &none,                 &none,                  TLR TLM BLI,                       TRR TRM BRI)
FCOMBO(COPY,       &kp LC(C),          &kp LS(LC(C)),         &none,                 &none,                  TLR BLM TLI,                       TRR BRM TRI)
FCOMBO(CUT,        &kp LC(X),          &kp LS(LC(X)),         &none,                 &none,                  BLR TLM TLI,                       BRR TRM TRI)
FCOMBO(UNDO,       &kp LC(Z),          &kp LS(LC(Z)),         &none,                 &none,                  TLR BLM BLI,                       TRR BRM BRI)
FCOMBO(SAVE,       &kp LC(S),          &kp LG(G),             &kp LG(W),             &kp LS(LC(S)),          BLR TLM BLI,                       BRR TRM BRI)
FCOMBO(REDO,       &kp LS(LC(Z)),      &kp LC(Z),             &none,                 &none,                  BLR BLM TLI,                       BRR BRM TLI)
FCOMBO(ESC,        &kp ESC,            &none,                 &none,                 &kp LG(L),              BLR BLM BLI,                       BRR BRM BRI)
FCOMBO(MISC,       &sl MISC,           &none,                 &none,                 &none,                  TLR BLR TLM BLM TLI BLI,           TRR BRR TRM BRM TRI BRI)

    };

    behaviors {
        sticky_numlock: sticky_numlock {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&sl NUM>, <&tog NUM>;
        };

        sticky_navlock: sticky_navlock {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&sl NAV>, <&tog NAV>;
        };

        sticky_lshift: sticky_lshift {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&sk LSHIFT>, <&kt LSHIFT>;
        };

        sticky_lctrl: sticky_lctrl {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&sk LCTRL>, <&kt LCTRL>;
        };

        sticky_lmeta: sticky_lmeta {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&sk LMETA>, <&kt LMETA>;
        };

        sticky_lalt: sticky_lalt {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&sk LEFT_ALT>, <&kt LEFT_ALT>;
        };

        sticky_ralt: sticky_ralt {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&sk RIGHT_ALT>, <&kt RIGHT_ALT>;
        };

        sk_ralt_lock: sk_ralt_lock {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sticky_ralt>, <&kt RIGHT_ALT>;

            mods = <(MOD_RALT)>;
        };

        sk_lalt_lock: sk_lalt_lock {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&sticky_lalt>, <&kt LEFT_ALT>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        sk_lmeta_lock: sk_lmeta_lock {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&sticky_lmeta>, <&kt LMETA>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        sk_lctrl_lock: sk_lctrl_lock {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&sticky_lctrl>, <&kt LCTRL>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        sk_lshift_lock: sk_lshift_lock {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&sticky_lshift>, <&kt LSHIFT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&shift>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <HOLD_TAP_TIMEOUT>;
        };

        ralt_i_cut: ralt_i_cut {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&as I>, <&kp LC(X)>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
            keep-mods = <(MOD_LCTL)>;
        };

        ralt_o_copy: ralt_o_copy {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&as O>, <&kp LC(C)>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
            keep-mods = <(MOD_LCTL)>;
        };

        ralt_n_paste: ralt_n_paste {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&as N>, <&kp LC(V)>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
            keep-mods = <(MOD_LCTL)>;
        };
        
        ltshift: ltshift {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&sk_lshift_lock>;
        
            #binding-cells = <2>;
            tapping-term-ms = <HOLD_TAP_TIMEOUT>;
        };

        tabdance: tabdance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp TAB>, <&kp TAB>, <&kp TAB>, <&sys_reset>, <&kp TAB>, <&bootloader>;
        };

        qwereset: qwereset {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&tog QWE>, <&none>, <&none>, <&sys_reset>, <&none>, <&bootloader>;
        };

    };

    macros {
        tqt: tqt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp APOS>,
                <&kp APOS>,
                <&kp APOS>;
        };

        shift: shift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LSHIFT>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHIFT>;
        };

        as: as {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        bougie {
            bindings = <
  &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3   &kp LC(X)      &kp LC(X)    &bt BT_SEL 3   &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0
  &sk_lshift_lock &kp E         &kp A         &kp T          &kp LC(C)      &kp LC(C)    &none          &none         &none         &none
  &kp TAB         &kp I         &kp O         &kp N          &kp LC(V)      &kp LC(V)    &none          &none         &none         &none
                                &mo NAV       &lt DESK BSPC  &lt NAV SPC    &lt NAV SPC  &lt DESK BSPC  &mo NUM
            >;
        };

        qwerty {
            bindings = <
  &kp Q         &kp W  &kp E     &kp R     &kp T            &kp Y    &kp U       &kp I      &kp O    &kp P
  &kp A         &kp S  &kp D     &kp F     &kp G            &kp H    &kp J       &kp K      &kp L    &kp SEMI
  &mt Z LSHIFT  &kp X  &kp C     &kp V     &kp B            &kp N    &kp M       &kp COMMA  &kp DOT  &mt FSLH RSHIFT
                       &qwereset &kp BSPC  &kp SPACE        &kp RET  &kp DELETE  &sl QNUM
            >;
        };

        qwenum {
            bindings = <
  &as N1  &as N2  &as N3  &as N4  &as N5    &as N6  &as N7  &as N8  &as N9  &as N0
  &as N8  &as N6  &as N4  &as N2  &trans    &trans  &as N4  &as N5  &as N6  &as N0
  &as N9  &as N7  &as N5  &as N3  &trans    &trans  &as N1  &as N2  &as N3  &as N0
                  &trans  &as N1  &as N0    &as N0  &as N1  &trans
            >;
        };
    

        nav {
            bindings = <
  &none     &none     &none      &none      &trans    &trans  &none     &none      &none      &none
  &kp LEFT  &kp DOWN  &kp UP     &kp RIGHT  &trans    &trans  &kp LEFT  &kp UP     &kp DOWN   &kp RIGHT
  &kp HOME  &kp PG_DN &kp PG_UP  &kp END    &trans    &trans  &kp HOME  &kp PG_UP  &kp PG_DN  &kp END
                      &none      &trans     &trans    &trans  &trans    &none
            >;
        };

        desktops {
            bindings = <
  &none                &none                 &none                &none                  &trans    &trans  &none                  &none                &none                 &none
  &kp LC(LG(LEFT))     &kp LC(LG(DOWN))      &kp LC(LG(UP))       &kp LC(LG(RIGHT))      &trans    &trans  &kp LC(LG(LEFT))       &kp LC(LG(UP))       &kp LC(LG(DOWN))      &kp LC(LG(RIGHT))
  &kp LS(LC(LG(LEFT))) &kp LS(LC(LG(DOWN)))  &kp LS(LC(LG(UP)))   &kp LS(LC(LG(RIGHT)))  &trans    &trans  &kp LS(LC(LG(LEFT)))   &kp LS(LC(LG(UP)))   &kp LS(LC(LG(DOWN)))  &kp LS(LC(LG(RIGHT)))
                                             &none                &trans                 &trans    &trans  &trans                 &none
            >;
        };

        windows {
            bindings = <
  &none             &none             &none           &none              &trans    &trans  &none             &none           &none             &none
  &kp LG(LEFT)      &kp LG(DOWN)      &kp LG(UP)      &kp LG(RIGHT)      &trans    &trans  &kp LG(LEFT)      &kp LG(UP)      &kp LG(DOWN)      &kp LG(RIGHT)
  &kp LS(LG(LEFT))  &kp LS(LG(DOWN))  &kp LS(LG(UP))  &kp LS(LG(RIGHT))  &trans    &trans  &kp LS(LG(LEFT))  &kp LS(LG(UP))  &kp LS(LG(DOWN))  &kp LS(LG(RIGHT))
                                      &none           &trans             &trans    &trans  &trans            &none
            >;
        };
        numbers {
            bindings = <
  &none   &none   &none   &none   &trans    &trans  &none   &none   &none   &none
  &as N8  &as N6  &as N4  &as N2  &trans    &trans  &as N2  &as N4  &as N6  &as N8
  &as N9  &as N7  &as N5  &as N3  &trans    &trans  &as N3  &as N5  &as N7  &as N9
                  &none   &as N1  &as N0    &as N0  &as N1  &none
            >;
        };

        symbols {
            bindings = <
  &none       &none       &none       &none       &trans        &trans      &none       &none       &none       &none
  &kp LS(N8)  &kp LS(N6)  &kp LS(N4)  &kp LS(N2)  &trans        &trans      &kp RS(N2)  &kp RS(N4)  &kp RS(N6)  &kp RS(N8)
  &kp LS(N9)  &kp LS(N7)  &kp LS(N5)  &kp LS(N3)  &trans        &trans      &kp RS(N3)  &kp RS(N5)  &kp LS(N7)  &kp RS(N9)
                          &none       &kp LS(N1)  &kp LS(N0)    &kp RS(N0)  &kp RS(N1)  &none
            >;
        };

        bt {
            bindings = <
  &none           &none         &none         &none         &trans    &trans  &none         &none         &none         &none
  &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &trans    &trans  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0
  &bt BT_CLR_ALL  &bt BT_PRV    &bt BT_NXT    &bt BT_CLR    &trans    &trans  &bt BT_CLR    &bt BT_NXT    &bt BT_PRV    &bt BT_CLR_ALL
                                &none         &trans        &trans    &trans  &trans        &none
            >;
        };

        misc {
            bindings = <
  &none           &none          &none         &none         &trans    &trans  &none         &none         &none          &none
  &kp C_VOL_DN    &kp C_MUTE     &kp C_VOL_UP  &sys_reset    &trans    &trans  &sys_reset    &kp C_VOL_UP  &kp C_MUTE     &kp C_VOL_DN
  &kp C_BRI_DN    &kp C_BKLT_TOG &kp C_BRI_UP  &bootloader   &trans    &trans  &bootloader   &kp C_BRI_UP  &kp C_BKLT_TOG &kp C_BRI_DN
                                 &none         &trans        &trans    &trans  &trans        &none
            >;
        };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        WIN {
            if-layers = <NAV DESK>;
            then-layer = <WIN>;
        };
    };


    };
};
