/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT_L 0

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    combos {
        compatible = "zmk,combos";

        tabesc-ret {
            bindings = <&kp RET>;
            key-positions = <0 10>;
        };

        io-u {
            bindings = <&kp U>;
            key-positions = <1 2>;
        };

        in-c {
            bindings = <&kp C>;
            key-positions = <1 3>;
        };

        ie-sklalt {
            bindings = <&sk LALT>;
            key-positions = <1 11>;
        };

        ia-y {
            bindings = <&kp Y>;
            key-positions = <1 12>;
        };

        it-w {
            bindings = <&kp W>;
            key-positions = <1 13>;
        };

        on-l {
            bindings = <&kp L>;
            key-positions = <2 3>;
        };

        oe-g {
            bindings = <&kp G>;
            key-positions = <11 2>;
        };

        oa-sklctrl {
            bindings = <&kp LCTRL>;
            key-positions = <2 12>;
        };

        ot-d {
            bindings = <&kp D>;
            key-positions = <2 13>;
        };

        ne-m {
            bindings = <&kp M>;
            key-positions = <3 11>;
        };

        na-f {
            bindings = <&kp F>;
            key-positions = <3 12>;
        };

        nt-skshift {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <13 3>;
        };

        ieo-apos {
            bindings = <&kp APOS>;
            key-positions = <11 1 2>;
        };

        ien-minus {
            bindings = <&kp MINUS>;
            key-positions = <11 1 3>;
        };

        iea-comma {
            bindings = <&kp COMMA>;
            key-positions = <1 11 12>;
        };

        iet-dot {
            bindings = <&kp DOT>;
            key-positions = <11 1 13>;
        };

        oai-p {
            bindings = <&kp P>;
            key-positions = <2 12 1>;
        };

        oan-z {
            bindings = <&kp Z>;
            key-positions = <2 12 3>;
        };

        oae-b {
            bindings = <&kp B>;
            key-positions = <12 2 11>;
        };

        oat-x {
            bindings = <&kp X>;
            key-positions = <12 2 13>;
        };

        nti-q {
            bindings = <&kp Q>;
            key-positions = <13 3 1>;
        };

        nto-v {
            bindings = <&kp V>;
            key-positions = <13 3 2>;
        };

        nte-j {
            bindings = <&kp J>;
            key-positions = <11 3 13>;
        };

        nta-k {
            bindings = <&kp K>;
            key-positions = <13 3 12>;
        };

        ieoa-del {
            bindings = <&kp DELETE>;
            key-positions = <11 1 2 12>;
        };

        ient-nav {
            bindings = <&sl 2>;
            key-positions = <11 1 13 3>;
        };

        oant-slnum {
            bindings = <&sl 3>;
            key-positions = <12 2 3 13>;
        };

        ion-ret {
            bindings = <&kp RET>;
            key-positions = <1 2 3>;
        };

        iot-paste {
            bindings = <&kp LC(V)>;
            key-positions = <1 2 13>;
        };

        ian-copy {
            bindings = <&kp LC(C)>;
            key-positions = <1 3 12>;
        };

        eon-cut {
            bindings = <&kp LC(X)>;
            key-positions = <11 2 3>;
        };

        ean-redo {
            bindings = <&kp LC(LS(Z))>;
            key-positions = <11 12 3>;
        };

        iat-undo {
            bindings = <&kp LC(Z)>;
            key-positions = <13 12 1>;
        };

        eot-pscrn {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <2 13 11>;
        };

        eat-esc {
            bindings = <&gresc>;
            key-positions = <11 12 13>;
        };

        iont-caps_word {
            bindings = <&caps_word>;
            key-positions = <1 2 3 13>;
        };

        ntea-caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <3 13 12 2 11>;
        };

        ntea-insert {
            bindings = <&kp INSERT>;
            key-positions = <11 12 13 3>;
        };

        test-space {
            bindings = <&none>;
            key-positions = <32 0>;
        };

        test-bs {
            bindings = <&none>;
            key-positions = <31 0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        bougie {
            label = "DEF";
            bindings = <
  &kp TAB      &kp I      &kp O      &kp N      &tog 1         &tog 1       &kp N      &kp O                &kp I      &kp TAB
  &kp ESCAPE   &kp E      &kp A      &kp T      &sys_reset     &sys_reset   &kp T      &kp A                &kp E      &kp ESCAPE
  &bootloader  &kp LC(X)  &kp LC(C)  &kp LC(V)  &bootloader    &bootloader  &kp LC(V)  &kp LC(C)            &kp LC(X)  &bootloader
                          &tog 1     &kp BSPC   &kp SPACE      &kp SPACE    &kp BSPC   &lt 0 RIGHT_BRACKET
            >;
        };

        qwerty {
            bindings = <
  &kp Q  &kp W  &kp E   &kp R     &kp T        &kp Y      &kp U     &kp I      &kp O    &kp P
  &kp A  &kp S  &kp D   &kp F     &kp G        &kp H      &kp J     &kp K      &kp L    &kp SEMI
  &kp Z  &kp X  &kp C   &kp V     &kp B        &kp N      &kp M     &kp COMMA  &kp DOT  &kp FSLH
                &tog 1  &kp BSPC  &kp SPACE    &kp SPACE  &kp BSPC  &kp RSHFT
            >;
        };

        nav {
            bindings = <
  &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &trans    &trans  &kp HOME  &kp PG_UP  &kp PG_DN  &kp END
  &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &trans    &trans  &kp LEFT  &kp UP     &kp DOWN   &kp RIGHT
  &trans    &kp LEFT   &kp DOWN   &kp RIGHT  &trans    &trans  &kp LEFT  &kp DOWN   &kp RIGHT  &trans
                       &trans     &trans     &trans    &trans  &trans    &trans
            >;
        };

        num {
            bindings = <
  &kp DOT  &kp N7  &kp N8  &kp N9  &trans    &trans  &kp N7  &kp N8  &kp N9  &kp DOT
  &kp N0   &kp N4  &kp N5  &kp N6  &trans    &trans  &kp N4  &kp N5  &kp N6  &kp N0
  &trans   &kp N1  &kp N2  &kp N3  &trans    &trans  &kp N1  &kp N2  &kp N3  &trans
                   &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        sym {
            bindings = <
  &kp EQUAL     &kp LS(AMPS)  &kp LS(STAR)   &kp LS(LPAR)   &trans    &trans  &kp LS(AMPS)  &kp LS(STAR)   &kp LS(LPAR)   &kp EQUAL
  &kp LS(RPAR)  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &trans    &trans  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &kp LS(RPAR)
  &trans        &kp LS(EXCL)  &kp LS(AT)     &kp LS(POUND)  &trans    &trans  &kp LS(EXCL)  &kp LS(AT)     &kp LS(POUND)  &trans
                              &trans         &trans         &trans    &trans  &trans        &trans
            >;
        };

        bt {
            bindings = <
  &bt BT_SEL 4  &bt BT_PRV    &bt BT_NXT    &bt BT_CLR    &trans    &trans  &trans  &trans  &trans  &trans
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &trans    &trans  &trans  &trans  &trans  &trans
  &trans        &trans        &trans        &trans        &trans    &trans  &trans  &trans  &trans  &trans
                              &trans        &trans        &trans    &trans  &trans  &trans
            >;
        };

        misc {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
