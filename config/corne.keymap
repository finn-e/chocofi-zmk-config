/*

    Copyright (c) 2020 The ZMK Contributors

    SPDX-License-Identifier: MIT
    */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT_L 0

&sk {
};

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    combos {
        compatible = "zmk,combos";

        br-skralt {
            bindings = <&sk_ralt_lock>;
            key-positions = <10 20>;
        };

        ea-h {
            bindings = <&as H>;
            key-positions = <11 12>;
        };

        et-s {
            bindings = <&as S>;
            key-positions = <11 13>;
        };

        ei-sklalt {
            bindings = <&sk_lalt_lock>;
            key-positions = <11 21>;
        };

        eo-y {
            bindings = <&as Y>;
            key-positions = <11 22>;
        };

        en-w {
            bindings = <&as W>;
            key-positions = <11 23>;
        };

        at-r {
            bindings = <&as R>;
            key-positions = <12 13>;
        };

        ai-g {
            bindings = <&as G>;
            key-positions = <21 12>;
        };

        ao-sklctrl {
            bindings = <&sk_lctrl_lock>;
            key-positions = <12 22>;
        };

        an-d {
            bindings = <&as D>;
            key-positions = <12 23>;
        };

        ti-m {
            bindings = <&as M>;
            key-positions = <13 21>;
        };

        to-f {
            bindings = <&as F>;
            key-positions = <13 22>;
        };

        tn-skmeta {
            bindings = <&sk_lmeta_lock>;
            key-positions = <23 13>;
        };

        io-u {
            bindings = <&as U>;
            key-positions = <21 22>;
        };

        in-c {
            bindings = <&as C>;
            key-positions = <21 23>;
        };

        on-l {
            bindings = <&as L>;
            key-positions = <22 23>;
        };

        eia-apos {
            bindings = <&kp APOS>;
            key-positions = <21 11 12>;
        };

        eit-minus {
            bindings = <&kp MINUS>;
            key-positions = <21 11 13>;
        };

        eio-comma {
            bindings = <&kp COMMA>;
            key-positions = <11 21 22>;
        };

        ein-dot {
            bindings = <&kp DOT>;
            key-positions = <21 11 23>;
        };

        aoe-p {
            bindings = <&as P>;
            key-positions = <12 22 11>;
        };

        aot-z {
            bindings = <&as Z>;
            key-positions = <12 22 13>;
        };

        aoi-b {
            bindings = <&as B>;
            key-positions = <22 12 21>;
        };

        aon-x {
            bindings = <&as X>;
            key-positions = <22 12 23>;
        };

        tne-q {
            bindings = <&as Q>;
            key-positions = <23 13 11>;
        };

        tna-v {
            bindings = <&as V>;
            key-positions = <23 13 12>;
        };

        tni-j {
            bindings = <&as J>;
            key-positions = <21 13 23>;
        };

        tno-k {
            bindings = <&as K>;
            key-positions = <23 13 22>;
        };

        eiao-del {
            bindings = <&kp DELETE>;
            key-positions = <21 11 12 22>;
        };

        eitn-slnav {
            bindings = <&sticky_navlock>;
            key-positions = <21 11 23 13>;
            layers = <0>;
        };

        eint-nav-tog {
            bindings = <&tog 2>;
            key-positions = <21 11 23 13>;
            layers = <2>;
        };

        aotn-slnum {
            bindings = <&sticky_numlock>;
            key-positions = <22 12 13 23>;
            layers = <0>;
        };

        aotn-num-tog {
            bindings = <&tog 3>;
            key-positions = <22 12 13 23>;
            layers = <3>;
        };

        eat-ret {
            bindings = <&kp RET>;
            key-positions = <11 12 13>;
        };

        ean-paste {
            bindings = <&kp LC(V)>;
            key-positions = <11 12 23>;
        };

        eot-copy {
            bindings = <&kp LC(C)>;
            key-positions = <11 13 22>;
        };

        iat-cut {
            bindings = <&kp LC(X)>;
            key-positions = <21 12 13>;
        };

        iot-redo {
            bindings = <&kp LC(LS(Z))>;
            key-positions = <21 22 13>;
        };

        eon-undo {
            bindings = <&kp LC(Z)>;
            key-positions = <23 22 11>;
        };

        ian-pscrn {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <12 23 21>;
        };

        ion-esc {
            bindings = <&gresc>;
            key-positions = <21 22 23>;
        };

        eatn-caps_word {
            bindings = <&caps_word>;
            key-positions = <11 12 13 23>;
        };

        tnio-caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <13 23 22 12 21>;
        };

        tnio-insert {
            bindings = <&kp INSERT>;
            key-positions = <21 22 23 13>;
        };

        SPr-home {
            bindings = <&kp HOME>;
            key-positions = <32 10>;
        };

        SPb-left {
            bindings = <&kp LEFT>;
            key-positions = <32 10>;
        };

        SPi-pgdn {
            bindings = <&kp PG_DN>;
            key-positions = <32 10>;
        };

        SPo-pgup {
            bindings = <&kp PG_UP>;
            key-positions = <32 10>;
        };

        SPn-end {
            bindings = <&kp END>;
            key-positions = <32 10>;
        };

        SPe-down {
            bindings = <&kp DOWN>;
            key-positions = <32 10>;
        };

        SPa-up {
            bindings = <&kp UP>;
            key-positions = <32 10>;
        };

        SPt-right {
            bindings = <&kp RIGHT>;
            key-positions = <32 10>;
        };

        SPea-h {
            bindings = <&as H>;
            key-positions = <32 11 12>;
        };

        SPet-s {
            bindings = <&as S>;
            key-positions = <32 11 13>;
        };

        SPei-sklalt {
            bindings = <&sk_lmeta_lock>;
            key-positions = <32 11 21>;
        };

        SPeo-y {
            bindings = <&as Y>;
            key-positions = <32 11 22>;
        };

        SPen-w {
            bindings = <&as W>;
            key-positions = <32 11 23>;
        };

        SPat-r {
            bindings = <&as R>;
            key-positions = <32 12 13>;
        };

        SPai-g {
            bindings = <&as G>;
            key-positions = <32 21 12>;
        };

        SPao-sklctrl {
            bindings = <&sk_lctrl_lock>;
            key-positions = <32 12 22>;
        };

        SPan-d {
            bindings = <&as D>;
            key-positions = <32 12 23>;
        };

        SPti-m {
            bindings = <&as M>;
            key-positions = <32 13 21>;
        };

        SPto-f {
            bindings = <&as F>;
            key-positions = <32 13 22>;
        };

        SPtn-skshift {
            bindings = <&sk_lshift_lock>;
            key-positions = <32 23 13>;
        };

        SPio-u {
            bindings = <&as U>;
            key-positions = <32 21 22>;
        };

        SPin-c {
            bindings = <&as C>;
            key-positions = <32 21 23>;
        };

        SPon-tab {
            bindings = <&kp TAB>;
            key-positions = <32 22 23>;
        };

        SPeia-apos {
            bindings = <&kp APOS>;
            key-positions = <32 21 11 12>;
        };

        SPeit-minus {
            bindings = <&kp MINUS>;
            key-positions = <32 21 11 13>;
        };

        SPeio-comma {
            bindings = <&kp COMMA>;
            key-positions = <32 11 21 22>;
        };

        SPein-dot {
            bindings = <&kp DOT>;
            key-positions = <32 21 11 23>;
        };

        SPaoe-p {
            bindings = <&as P>;
            key-positions = <32 12 22 11>;
        };

        SPaot-z {
            bindings = <&as Z>;
            key-positions = <32 12 22 13>;
        };

        SPaoi-b {
            bindings = <&as B>;
            key-positions = <32 22 12 21>;
        };

        SPaon-x {
            bindings = <&as X>;
            key-positions = <32 22 12 23>;
        };

        SPtne-q {
            bindings = <&as Q>;
            key-positions = <32 23 13 11>;
        };

        SPtna-v {
            bindings = <&as V>;
            key-positions = <32 23 13 12>;
        };

        SPtni-j {
            bindings = <&as J>;
            key-positions = <32 21 13 23>;
        };

        SPtno-stab {
            bindings = <&kp LS(TAB)>;
            key-positions = <32 23 13 22>;
        };

        SPeiao-del {
            bindings = <&kp DELETE>;
            key-positions = <32 21 11 12 22>;
        };

        SPeitn-slnav {
            bindings = <&sticky_navlock>;
            key-positions = <32 21 11 23 13>;
            layers = <32 0>;
        };

        SPeint-nav-tog {
            bindings = <&tog 2>;
            key-positions = <32 21 11 23 13>;
            layers = <32 2>;
        };

        SPaotn-bt {
            bindings = <&sl 5>;
            key-positions = <32 22 12 13 23>;
        };

        SPaotn-num-tog {
            bindings = <&tog 3>;
            key-positions = <32 22 12 13 23>;
            layers = <32 3>;
        };

        SPeat-ret {
            bindings = <&kp RET>;
            key-positions = <32 11 12 13>;
        };

        SPean-paste {
            bindings = <&kp LC(V)>;
            key-positions = <32 11 12 23>;
        };

        SPeot-copy {
            bindings = <&kp LC(C)>;
            key-positions = <32 11 13 22>;
        };

        SPiat-cut {
            bindings = <&kp LC(X)>;
            key-positions = <32 21 12 13>;
        };

        SPiot-redo {
            bindings = <&kp LC(LS(Z))>;
            key-positions = <32 21 22 13>;
        };

        SPeon-undo {
            bindings = <&kp LC(Z)>;
            key-positions = <32 23 22 11>;
        };

        SPian-pscrn {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <32 12 23 21>;
        };

        SPion-esc {
            bindings = <&gresc>;
            key-positions = <32 21 22 23>;
        };

        SPeatn-caps_word {
            bindings = <&caps_word>;
            key-positions = <32 11 12 13 23>;
        };

        SPtnio-caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <32 13 23 22 12 21>;
        };

        SPtnio-insert {
            bindings = <&kp INSERT>;
            key-positions = <32 21 22 23 13>;
        };

        KRr-tab {
            bindings = <&kp TAB>;
            key-positions = <31 10>;
        };

        KRb-del {
            bindings = <&kp DELETE>;
            key-positions = <31 20>;
        };

        KRi-7 {
            bindings = <&kp N7>;
            key-positions = <31 11>;
        };

        KRo-8 {
            bindings = <&kp N8>;
            key-positions = <31 12>;
        };

        KRn-9 {
            bindings = <&kp N9>;
            key-positions = <31 13>;
        };

        KRe-4 {
            bindings = <&kp N4>;
            key-positions = <31 21>;
        };

        KRa-5 {
            bindings = <&kp N5>;
            key-positions = <31 22>;
        };

        KRt-6 {
            bindings = <&kp N6>;
            key-positions = <31 23>;
        };

        KRrb-sklalt {
            bindings = <&sk_lalt_lock>;
            key-positions = <31 10 20>;
        };

        KRea-h {
            bindings = <&as H>;
            key-positions = <31 11 12>;
        };

        KRet-s {
            bindings = <&as S>;
            key-positions = <31 11 13>;
        };

        KRei-sklalt {
            bindings = <&sk_lmeta_lock>;
            key-positions = <31 11 21>;
        };

        KReo-y {
            bindings = <&as Y>;
            key-positions = <31 11 22>;
        };

        KRen-w {
            bindings = <&as W>;
            key-positions = <31 11 23>;
        };

        KRat-r {
            bindings = <&as R>;
            key-positions = <31 12 13>;
        };

        KRai-g {
            bindings = <&as G>;
            key-positions = <31 21 12>;
        };

        KRao-sklctrl {
            bindings = <&sk_lctrl_lock>;
            key-positions = <31 12 22>;
        };

        KRan-d {
            bindings = <&as D>;
            key-positions = <31 12 23>;
        };

        KRti-m {
            bindings = <&as M>;
            key-positions = <31 13 21>;
        };

        KRto-f {
            bindings = <&as F>;
            key-positions = <31 13 22>;
        };

        KRtn-skshift {
            bindings = <&sk_lshift_lock>;
            key-positions = <31 23 13>;
        };

        KReia-apos {
            bindings = <&kp APOS>;
            key-positions = <31 21 11 12>;
        };

        KReit-minus {
            bindings = <&kp MINUS>;
            key-positions = <31 21 11 13>;
        };

        KReio-comma {
            bindings = <&kp COMMA>;
            key-positions = <31 11 21 22>;
        };

        KRein-dot {
            bindings = <&kp DOT>;
            key-positions = <31 21 11 23>;
        };

        KRaoe-p {
            bindings = <&as P>;
            key-positions = <31 12 22 11>;
        };

        KRaot-z {
            bindings = <&as Z>;
            key-positions = <31 12 22 13>;
        };

        KRaoi-b {
            bindings = <&as B>;
            key-positions = <31 22 12 21>;
        };

        KRaon-x {
            bindings = <&as X>;
            key-positions = <31 22 12 23>;
        };

        KRtne-q {
            bindings = <&as Q>;
            key-positions = <31 23 13 11>;
        };

        KRtna-v {
            bindings = <&as V>;
            key-positions = <31 23 13 12>;
        };

        KRtni-j {
            bindings = <&as J>;
            key-positions = <31 21 13 23>;
        };

        KRtno-k {
            bindings = <&as K>;
            key-positions = <31 23 13 22>;
        };

        KReiao-del {
            bindings = <&kp DELETE>;
            key-positions = <31 21 11 12 22>;
        };

        KReitn-slnav {
            bindings = <&sticky_navlock>;
            key-positions = <31 21 11 23 13>;
            layers = <31 0>;
        };

        KReint-nav-tog {
            bindings = <&tog 2>;
            key-positions = <31 21 11 23 13>;
            layers = <31 2>;
        };

        KRaotn-slnum {
            bindings = <&sticky_numlock>;
            key-positions = <31 22 12 13 23>;
            layers = <31 0>;
        };

        KRaotn-num-tog {
            bindings = <&tog 3>;
            key-positions = <31 22 12 13 23>;
            layers = <31 3>;
        };

        KReat-ret {
            bindings = <&kp RET>;
            key-positions = <31 11 12 13>;
        };

        KRean-paste {
            bindings = <&kp LC(V)>;
            key-positions = <31 11 12 23>;
        };

        KReot-copy {
            bindings = <&kp LC(C)>;
            key-positions = <31 11 13 22>;
        };

        KRiat-cut {
            bindings = <&kp LC(X)>;
            key-positions = <31 21 12 13>;
        };

        KRiot-redo {
            bindings = <&kp LC(LS(Z))>;
            key-positions = <31 21 22 13>;
        };

        KReon-undo {
            bindings = <&kp LC(Z)>;
            key-positions = <31 23 22 11>;
        };

        KRian-pscrn {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <31 12 23 21>;
        };

        KRion-esc {
            bindings = <&gresc>;
            key-positions = <31 21 22 23>;
        };

        KReatn-caps_word {
            bindings = <&caps_word>;
            key-positions = <31 11 12 13 23>;
        };

        KRtnio-caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <31 13 23 22 12 21>;
        };

        KRtnio-insert {
            bindings = <&kp INSERT>;
            key-positions = <31 21 22 23 13>;
        };

        // --- Right Hand Combos (Mirrored) ---

        rb-skralt_R {
            bindings = <&sk_ralt_lock>;
            key-positions = <19 29>;
        };

        ea-h_R {
            bindings = <&as H>;
            key-positions = <18 17>;
        };

        et-s_R {
            bindings = <&as S>;
            key-positions = <18 16>;
        };

        ei-sklalt_R {
            bindings = <&sk_lalt_lock>;
            key-positions = <18 28>;
        };

        eo-y_R {
            bindings = <&as Y>;
            key-positions = <18 27>;
        };

        en-w_R {
            bindings = <&as W>;
            key-positions = <18 26>;
        };

        at-r_R {
            bindings = <&as R>;
            key-positions = <17 16>;
        };

        ai-g_R {
            bindings = <&as G>;
            key-positions = <28 17>;
        };

        ao-sklctrl_R {
            bindings = <&sk_lctrl_lock>;
            key-positions = <17 27>;
        };

        an-d_R {
            bindings = <&as D>;
            key-positions = <17 26>;
        };

        ti-m_R {
            bindings = <&as M>;
            key-positions = <16 28>;
        };

        to-f_R {
            bindings = <&as F>;
            key-positions = <16 27>;
        };

        tn-skmeta_R {
            bindings = <&sk_lmeta_lock>;
            key-positions = <26 16>;
        };

        io-u_R {
            bindings = <&as U>;
            key-positions = <28 27>;
        };

        in-c_R {
            bindings = <&as C>;
            key-positions = <28 26>;
        };

        on-l_R {
            bindings = <&as L>;
            key-positions = <27 26>;
        };

        eia-apos_R {
            bindings = <&kp APOS>;
            key-positions = <28 18 17>;
        };

        eit-minus_R {
            bindings = <&kp MINUS>;
            key-positions = <28 18 16>;
        };

        eio-comma_R {
            bindings = <&kp COMMA>;
            key-positions = <18 28 27>;
        };

        ein-dot_R {
            bindings = <&kp DOT>;
            key-positions = <28 18 26>;
        };

        aoe-p_R {
            bindings = <&as P>;
            key-positions = <17 27 18>;
        };

        aot-z_R {
            bindings = <&as Z>;
            key-positions = <17 27 16>;
        };

        aoi-b_R {
            bindings = <&as B>;
            key-positions = <27 17 28>;
        };

        aon-x_R {
            bindings = <&as X>;
            key-positions = <27 17 26>;
        };

        tne-q_R {
            bindings = <&as Q>;
            key-positions = <26 16 18>;
        };

        tna-v_R {
            bindings = <&as V>;
            key-positions = <26 16 17>;
        };

        tni-j_R {
            bindings = <&as J>;
            key-positions = <28 16 26>;
        };

        tno-k_R {
            bindings = <&as K>;
            key-positions = <26 16 27>;
        };

        eiao-del_R {
            bindings = <&kp DELETE>;
            key-positions = <28 18 17 27>;
        };

        eitn-slnav_R {
            bindings = <&sticky_navlock>;
            key-positions = <28 18 26 16>;
            layers = <0>;
        };

        eint-nav-tog_R {
            bindings = <&tog 2>;
            key-positions = <28 18 26 16>;
            layers = <2>;
        };

        aotn-slnum_R {
            bindings = <&sticky_numlock>;
            key-positions = <27 17 16 26>;
            layers = <0>;
        };

        aotn-num-tog_R {
            bindings = <&tog 3>;
            key-positions = <27 17 16 26>;
            layers = <3>;
        };

        eat-ret_R {
            bindings = <&kp RET>;
            key-positions = <18 17 16>;
        };

        ean-paste_R {
            bindings = <&kp LC(V)>;
            key-positions = <18 17 26>;
        };

        eot-copy_R {
            bindings = <&kp LC(C)>;
            key-positions = <18 16 27>;
        };

        iat-cut_R {
            bindings = <&kp LC(X)>;
            key-positions = <28 17 16>;
        };

        iot-redo_R {
            bindings = <&kp LC(LS(Z))>;
            key-positions = <28 27 16>;
        };

        eon-undo_R {
            bindings = <&kp LC(Z)>;
            key-positions = <26 27 18>;
        };

        ian-pscrn_R {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <17 26 28>;
        };

        ion-esc_R {
            bindings = <&gresc>;
            key-positions = <28 27 26>;
        };

        eatn-caps_word_R {
            bindings = <&caps_word>;
            key-positions = <18 17 16 26>;
        };

        tnio-caps_R {
            bindings = <&kp CAPSLOCK>;
            key-positions = <16 26 27 17 28>;
        };

        tnio-insert_R {
            bindings = <&kp INSERT>;
            key-positions = <28 27 26 16>;
        };

        SPr-home_R {
            bindings = <&kp HOME>;
            key-positions = <33 19>;
        };

        SPb-left_R {
            bindings = <&kp LEFT>;
            key-positions = <33 19>;
        };

        SPi-pgdn_R {
            bindings = <&kp PG_DN>;
            key-positions = <33 19>;
        };

        SPo-pgup_R {
            bindings = <&kp PG_UP>;
            key-positions = <33 19>;
        };

        SPn-end_R {
            bindings = <&kp END>;
            key-positions = <33 19>;
        };

        SPe-down_R {
            bindings = <&kp DOWN>;
            key-positions = <33 19>;
        };

        SPa-up_R {
            bindings = <&kp UP>;
            key-positions = <33 19>;
        };

        SPt-right_R {
            bindings = <&kp RIGHT>;
            key-positions = <33 19>;
        };

        SPx-left_R {
            bindings = <&kp LEFT>;
            key-positions = <33 19>;
        };

        SPc-down_R {
            bindings = <&kp DOWN>;
            key-positions = <33 19>;
        };

        SPv-right_R {
            bindings = <&kp RIGHT>;
            key-positions = <33 19>;
        };

        SPrb-sklalt_R {
            bindings = <&sk_lalt_lock>;
            key-positions = <33 19 29>;
        };

        SPea-h_R {
            bindings = <&as H>;
            key-positions = <33 18 17>;
        };

        SPet-s_R {
            bindings = <&as S>;
            key-positions = <33 18 16>;
        };

        SPei-sklalt_R {
            bindings = <&sk_lmeta_lock>;
            key-positions = <33 18 28>;
        };

        SPeo-y_R {
            bindings = <&as Y>;
            key-positions = <33 18 27>;
        };

        SPen-w_R {
            bindings = <&as W>;
            key-positions = <33 18 26>;
        };

        SPat-r_R {
            bindings = <&as R>;
            key-positions = <33 17 16>;
        };

        SPai-g_R {
            bindings = <&as G>;
            key-positions = <33 28 17>;
        };

        SPao-sklctrl_R {
            bindings = <&sk_lctrl_lock>;
            key-positions = <33 17 27>;
        };

        SPan-d_R {
            bindings = <&as D>;
            key-positions = <33 17 26>;
        };

        SPti-m_R {
            bindings = <&as M>;
            key-positions = <33 16 28>;
        };

        SPto-f_R {
            bindings = <&as F>;
            key-positions = <33 16 27>;
        };

        SPtn-skshift_R {
            bindings = <&sk_lshift_lock>;
            key-positions = <33 26 16>;
        };

        SPio-u_R {
            bindings = <&as U>;
            key-positions = <33 28 27>;
        };

        SPin-c_R {
            bindings = <&as C>;
            key-positions = <33 28 26>;
        };

        SPon-l_R {
            bindings = <&as L>;
            key-positions = <33 27 26>;
        };

        SPeia-apos_R {
            bindings = <&kp APOS>;
            key-positions = <33 28 18 17>;
        };

        SPeit-minus_R {
            bindings = <&kp MINUS>;
            key-positions = <33 28 18 16>;
        };

        SPeio-comma_R {
            bindings = <&kp COMMA>;
            key-positions = <33 18 28 27>;
        };

        SPein-dot_R {
            bindings = <&kp DOT>;
            key-positions = <33 28 18 26>;
        };

        SPaoe-p_R {
            bindings = <&as P>;
            key-positions = <33 17 27 18>;
        };

        SPaot-z_R {
            bindings = <&as Z>;
            key-positions = <33 17 27 16>;
        };

        SPaoi-b_R {
            bindings = <&as B>;
            key-positions = <33 27 17 28>;
        };

        SPaon-x_R {
            bindings = <&as X>;
            key-positions = <33 27 17 26>;
        };

        SPtne-q_R {
            bindings = <&as Q>;
            key-positions = <33 26 16 18>;
        };

        SPtna-v_R {
            bindings = <&as V>;
            key-positions = <33 26 16 17>;
        };

        SPtni-j_R {
            bindings = <&as J>;
            key-positions = <33 28 16 26>;
        };

        SPtno-k_R {
            bindings = <&as K>;
            key-positions = <33 26 16 27>;
        };

        SPeiao-del_R {
            bindings = <&kp DELETE>;
            key-positions = <33 28 18 17 27>;
        };

        SPeitn-slnav_R {
            bindings = <&sticky_navlock>;
            key-positions = <33 28 18 26 16>;
            layers = <33 0>;
        };

        SPeint-nav-tog_R {
            bindings = <&tog 2>;
            key-positions = <33 28 18 26 16>;
            layers = <33 2>;
        };

        SPaotn-bt_R {
            bindings = <&sl 5>;
            key-positions = <33 27 17 16 26>;
        };

        SPaotn-num-tog_R {
            bindings = <&tog 3>;
            key-positions = <33 27 17 16 26>;
            layers = <33 3>;
        };

        SPeat-ret_R {
            bindings = <&kp RET>;
            key-positions = <33 18 17 16>;
        };

        SPean-paste_R {
            bindings = <&kp LC(V)>;
            key-positions = <33 18 17 26>;
        };

        SPeot-copy_R {
            bindings = <&kp LC(C)>;
            key-positions = <33 18 16 27>;
        };

        SPiat-cut_R {
            bindings = <&kp LC(X)>;
            key-positions = <33 28 17 16>;
        };

        SPiot-redo_R {
            bindings = <&kp LC(LS(Z))>;
            key-positions = <33 28 27 16>;
        };

        SPeon-undo_R {
            bindings = <&kp LC(Z)>;
            key-positions = <33 26 27 18>;
        };

        SPian-pscrn_R {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <33 17 26 28>;
        };

        SPion-esc_R {
            bindings = <&gresc>;
            key-positions = <33 28 27 26>;
        };

        SPeatn-caps_word_R {
            bindings = <&caps_word>;
            key-positions = <33 18 17 16 26>;
        };

        SPtnio-caps_R {
            bindings = <&kp CAPSLOCK>;
            key-positions = <33 16 26 27 17 28>;
        };

        SPtnio-insert_R {
            bindings = <&kp INSERT>;
            key-positions = <33 28 27 26 16>;
        };

        KRr-tab_R {
            bindings = <&kp TAB>;
            key-positions = <34 19>;
        };

        KRb-del_R {
            bindings = <&kp DELETE>;
            key-positions = <34 29>;
        };

        KRi-7_R {
            bindings = <&kp N7>;
            key-positions = <34 18>;
        };

        KRo-8_R {
            bindings = <&kp N8>;
            key-positions = <34 17>;
        };

        KRn-9_R {
            bindings = <&kp N9>;
            key-positions = <34 16>;
        };

        KRe-4_R {
            bindings = <&kp N4>;
            key-positions = <34 28>;
        };

        KRa-5_R {
            bindings = <&kp N5>;
            key-positions = <34 27>;
        };

        KRt-6_R {
            bindings = <&kp N6>;
            key-positions = <34 26>;
        };

        KRrb-sklalt_R {
            bindings = <&sk_lalt_lock>;
            key-positions = <34 19 29>;
        };

        KRea-h_R {
            bindings = <&as H>;
            key-positions = <34 18 17>;
        };

        KRet-s_R {
            bindings = <&as S>;
            key-positions = <34 18 16>;
        };

        KRei-sklalt_R {
            bindings = <&sk_lmeta_lock>;
            key-positions = <34 18 28>;
        };

        KReo-y_R {
            bindings = <&as Y>;
            key-positions = <34 18 27>;
        };

        KRen-w_R {
            bindings = <&as W>;
            key-positions = <34 18 26>;
        };

        KRat-r_R {
            bindings = <&as R>;
            key-positions = <34 17 16>;
        };

        KRai-g_R {
            bindings = <&as G>;
            key-positions = <34 28 17>;
        };

        KRao-sklctrl_R {
            bindings = <&sk_lctrl_lock>;
            key-positions = <34 17 27>;
        };

        KRan-d_R {
            bindings = <&as D>;
            key-positions = <34 17 26>;
        };

        KRti-m_R {
            bindings = <&as M>;
            key-positions = <34 16 28>;
        };

        KRto-f_R {
            bindings = <&as F>;
            key-positions = <34 16 27>;
        };

        KRtn-skshift_R {
            bindings = <&sk_lshift_lock>;
            key-positions = <34 26 16>;
        };

        KReia-apos_R {
            bindings = <&kp APOS>;
            key-positions = <34 28 18 17>;
        };

        KReit-minus_R {
            bindings = <&kp MINUS>;
            key-positions = <34 28 18 16>;
        };

        KReio-comma_R {
            bindings = <&kp COMMA>;
            key-positions = <34 18 28 27>;
        };

        KRein-dot_R {
            bindings = <&kp DOT>;
            key-positions = <34 28 18 26>;
        };

        KRaoe-p_R {
            bindings = <&as P>;
            key-positions = <34 17 27 18>;
        };

        KRaot-z_R {
            bindings = <&as Z>;
            key-positions = <34 17 27 16>;
        };

        KRaoi-b_R {
            bindings = <&as B>;
            key-positions = <34 27 17 28>;
        };

        KRaon-x_R {
            bindings = <&as X>;
            key-positions = <34 27 17 26>;
        };

        KRtne-q_R {
            bindings = <&as Q>;
            key-positions = <34 26 16 18>;
        };

        KRtna-v_R {
            bindings = <&as V>;
            key-positions = <34 26 16 17>;
        };

        KRtni-j_R {
            bindings = <&as J>;
            key-positions = <34 28 16 26>;
        };

        KRtno-k_R {
            bindings = <&as K>;
            key-positions = <34 26 16 27>;
        };

        KReiao-del_R {
            bindings = <&kp DELETE>;
            key-positions = <34 28 18 17 27>;
        };

        KReitn-slnav_R {
            bindings = <&sticky_navlock>;
            key-positions = <34 28 18 26 16>;
            layers = <34 0>;
        };

        KReint-nav-tog_R {
            bindings = <&tog 2>;
            key-positions = <34 28 18 26 16>;
            layers = <34 2>;
        };

        KRaotn-slnum_R {
            bindings = <&sticky_numlock>;
            key-positions = <34 27 17 16 26>;
            layers = <34 0>;
        };

        KRaotn-num-tog_R {
            bindings = <&tog 3>;
            key-positions = <34 27 17 16 26>;
            layers = <34 3>;
        };

        KReat-ret_R {
            bindings = <&kp RET>;
            key-positions = <34 18 17 16>;
        };

        KRean-paste_R {
            bindings = <&kp LC(V)>;
            key-positions = <34 18 17 26>;
        };

        KReot-copy_R {
            bindings = <&kp LC(C)>;
            key-positions = <34 18 16 27>;
        };

        KRiat-cut_R {
            bindings = <&kp LC(X)>;
            key-positions = <34 28 17 16>;
        };

        KRiot-redo_R {
            bindings = <&kp LC(LS(Z))>;
            key-positions = <34 28 27 16>;
        };

        KReon-undo_R {
            bindings = <&kp LC(Z)>;
            key-positions = <34 26 27 18>;
        };

        KRian-pscrn_R {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <34 17 26 28>;
        };

        KRion-esc_R {
            bindings = <&gresc>;
            key-positions = <34 28 27 26>;
        };

        KReatn-caps_word_R {
            bindings = <&caps_word>;
            key-positions = <34 18 17 16 26>;
        };

        KRtnio-caps_R {
            bindings = <&kp CAPSLOCK>;
            key-positions = <34 16 26 27 17 28>;
        };

        KRtnio-insert_R {
            bindings = <&kp INSERT>;
            key-positions = <34 28 27 26 16>;
        };

        be-cut {
            bindings = <&kp LC(X)>;
            key-positions = <10 21>;
        };

        ba-copy {
            bindings = <&kp LC(C)>;
            key-positions = <10 22>;
        };

        bt-paste {
            bindings = <&kp LC(V)>;
            key-positions = <10 23>;
        };
    };

    behaviors {
        sticky_numlock: sticky_numlock {
            compatible = "zmk,behavear-tap-dance";
            #binding-cells = <0>;
            bindings = <&sl 3>, <&tog 3>;
        };

        sticky_navlock: sticky_navlock {
            compatible = "zmk,behavear-tap-dance";
            #binding-cells = <0>;
            bindings = <&sl 2>, <&tog 2>;
        };

        sticky_lshift: sticky_lshift {
            compatible = "zmk,behavear-tap-dance";
            #binding-cells = <0>;
            bindings = <&sk LSHIFT>, <&kt LSHIFT>;
        };

        sticky_lctrl: sticky_lctrl {
            compatible = "zmk,behavear-tap-dance";
            #binding-cells = <0>;
            bindings = <&sk LCTRL>, <&kt LCTRL>;
        };

        sticky_lmeta: sticky_lmeta {
            compatible = "zmk,behavear-tap-dance";
            #binding-cells = <0>;
            bindings = <&sk LMETA>, <&kt LMETA>;
        };

        sticky_lalt: sticky_lalt {
            compatible = "zmk,behavear-tap-dance";
            #binding-cells = <0>;
            bindings = <&sk LEFT_ALT>, <&kt LEFT_ALT>;
        };

        sticky_ralt: sticky_ralt {
            compatible = "zmk,behavear-tap-dance";
            #binding-cells = <0>;
            bindings = <&sk RIGHT_ALT>, <&kt RIGHT_ALT>;
        };

        sk_ralt_lock: sk_ralt_lock {
            compatible = "zmk,behavear-mod-morph";
            bindings = <&sticky_ralt>, <&kt RIGHT_ALT>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
        };

        sk_lalt_lock: sk_lalt_lock {
            compatible = "zmk,behavear-mod-morph";
            bindings = <&sticky_lalt>, <&kt LEFT_ALT>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        sk_lmeta_lock: sk_lmeta_lock {
            compatible = "zmk,behavear-mod-morph";
            bindings = <&sticky_lmeta>, <&kt LMETA>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        sk_lctrl_lock: sk_lctrl_lock {
            compatible = "zmk,behavear-mod-morph";
            bindings = <&sticky_lctrl>, <&kt LCTRL>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        sk_lshift_lock: sk_lshift_lock {
            compatible = "zmk,behavear-mod-morph";
            bindings = <&sticky_lshift>, <&kt LSHIFT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavear-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            bindings = <&shift>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
        };

        ralt_i_cut: ralt_i_cut {
            compatible = "zmk,behavear-mod-morph";
            label = "RALT_I_CUT";
            bindings = <&as I>, <&kp LC(X)>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
            keip-mods = <(MOD_LCTL)>;
        };

        ralt_o_copy: ralt_o_copy {
            compatible = "zmk,behavear-mod-morph";
            label = "RALT_O_COPY";
            bindings = <&as O>, <&kp LC(C)>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
            keip-mods = <(MOD_LCTL)>;
        };

        ralt_n_paste: ralt_n_paste {
            compatible = "zmk,behavear-mod-morph";
            label = "RALT_N_PASTE";
            bindings = <&as N>, <&kp LC(V)>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
            keip-mods = <(MOD_LCTL)>;
        };
    };

    macros {
        shift: shift {
            compatible = "zmk,behavear-macra-ati-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LSHIFT>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHIFT>;

            label = "SHIFT";
        };

        as: as {
            compatible = "zmk,behavear-macra-ati-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;

            label = "AS";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        bougie {
            bindings = <
  &bt BT_CLR     &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3   &tog 1         &tog 1       &bt BT_SEL 3   &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_CLR
  &kp BACKSPACE  &as E         &as A         &as T          &sys_reset     &sys_reset   &as T          &as A         &as E         &kp BACKSPACE
  &kp RET        &ralt_i_cut   &ralt_o_copy  &ralt_n_paste  &bootloader    &bootloader  &ralt_n_paste  &ralt_o_copy  &ralt_i_cut   &kp RET
                               &key_repeat   &kp BSPC       &kp SPACE      &kp SPACE    &kp BSPC       &key_repeat
            >;

            label = "DEF";
        };

        qwerty {
            bindings = <
  &kp Q         &kp W  &kp E   &kp R     &kp T        &kp Y    &kp U       &kp I            &kp O    &kp P
  &kp A         &kp S  &kp D   &kp F     &kp G        &kp H    &kp J       &kp K            &kp L    &kp SEMI
  &mt Z LSHIFT  &kp X  &kp C   &kp V     &kp B        &kp N    &kp M       &kp COMMA        &kp DOT  &mt FSLH RSHIFT
                       &tog 1  &kp BSPC  &kp SPACE    &kp RET  &kp DELETE  &mo 7
            >;
        };

        nav {
            bindings = <
  &kp HOME  &kp PG_DN          &kp PG_UP  &kp END    &trans    &trans  &kp HOME  &kp PG_UP  &kp PG_DN  &kp END
  &kp LEFT  &kp DOWN           &kp UP     &kp RIGHT  &trans    &trans  &kp LEFT  &kp UP     &kp DOWN   &kp RIGHT
  &kp HOME  &kp RS(PAGE_DOWN)  &kp PG_UP  &kp END    &trans    &trans  &kp HOME  &kp PG_UP  &kp PG_DN  &kp END
                               &to 0      &trans     &trans    &trans  &trans    &to 0
            >;
        };

        num {
            bindings = <
  &none   &none   &none   &none   &trans    &trans  &none   &none   &none   &none
  &kp N8  &kp N6  &kp N4  &kp N2  &trans    &trans  &kp N2  &kp N4  &kp N6  &kp N8
  &kp N9  &kp N7  &kp N5  &kp N3  &trans    &trans  &kp N3  &kp N5  &kp N7  &kp N9
                  &to 0   &kp N1  &kp N0    &kp N0  &kp N1  &to 0
            >;
        };

        sym {
            bindings = <
  &none       &none       &none       &none       &trans        &trans      &none       &none       &none       &none
  &kp LS(N8)  &kp LS(N6)  &kp LS(N4)  &kp LS(N2)  &trans        &trans      &kp RS(N2)  &kp RS(N4)  &kp RS(N6)  &kp RS(N8)
  &kp LS(N9)  &kp LS(N7)  &kp LS(N5)  &kp LS(N3)  &trans        &trans      &kp RS(N3)  &kp RS(N5)  &kp LS(N7)  &kp RS(N9)
                          &to 0       &kp LS(N1)  &kp LS(N0)    &kp RS(N0)  &kp RS(N1)  &to 0
            >;
        };

        bt {
            bindings = <
  &none           &none         &none         &none         &trans    &trans  &none         &none         &none         &none
  &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &trans    &trans  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0
  &bt BT_CLR_ALL  &bt BT_PRV    &bt BT_NXT    &bt BT_CLR    &trans    &trans  &bt BT_CLR    &bt BT_NXT    &bt BT_PRV    &bt BT_CLR_ALL
                                &to 0         &trans        &trans    &trans  &trans        &to 0
            >;
        };

        misc {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &to 0   &trans  &trans    &trans  &trans  &to 0
            >;
        };

        qwenum {
            bindings = <
  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &kp N6  &kp N7  &kp N8  &kp N9  &kp N0
  &kp N8  &kp N6  &kp N4  &kp N2  &trans    &trans  &kp N4  &kp N5  &kp N6  &kp N0
  &kp N9  &kp N7  &kp N5  &kp N3  &trans    &trans  &kp N1  &kp N2  &kp N3  &kp N0
                  &to 0   &kp N1  &kp N0    &kp N0  &kp N1  &to 0
            >;
        };

    };
};
